declare global {
    interface Window {
        TradingView?: TradingView;
    }
}
declare type Widget = {
    new (options: Record<string, unknown>): {
        id: string;
        options: Record<string, unknown>;
    };
};
export interface TradingView {
    host: string;
    ideasHost: string;
    chatHost: string;
    widgetHost: string;
    getHost(e: unknown): string;
    embedStylesForCopyright(): void;
    embedStylesForFullHeight(n: number, hasCopyright: boolean, id: string): void;
    gId(): string;
    isPersentHeight(): boolean;
    getSuffix(): string;
    hasCopyright(id: string): boolean;
    calculateWidgetHeight(num: number, element: unknown): string;
    onready(e: Event): void;
    css(e: unknown): void;
    bindEvent(e: unknown, t: unknown, o: unknown): void;
    unbindEvent(e: unknown, t: unknown, o: unknown): void;
    cloneSimpleObject(e: unknown): typeof e;
    isArray(e: unknown): boolean;
    isMobileDevice(device?: Record<string, boolean>): boolean;
    generateUtmForUrlParams(e: unknown): string;
    WidgetAbstract(): Record<string, unknown>;
    MiniWidget: Widget;
    MediumWidget: Widget;
    widget: Widget;
    chart: Widget;
    stream: Widget;
    EventsWidget: Widget;
    IdeasStreamWidget: Widget;
    IdeaWidget: Widget;
    ChatWidgetEmbed: Widget;
}
export declare const injectTradingView: (signal?: AbortSignal) => Promise<TradingView>;
export {};
