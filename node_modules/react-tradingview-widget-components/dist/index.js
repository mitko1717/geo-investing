import React, { useRef, useEffect, useCallback, useState } from 'react';

const injectTradingView = (signal) => {
    return new Promise((resolve, reject) => {
        if (window.TradingView) {
            resolve(window.TradingView);
            return;
        }
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "https://s3.tradingview.com/tv.js";
        script.async = true;
        script.onload = () => {
            if (signal?.aborted) {
                reject(new Error("TradingView Widget script load aborted."));
                return;
            }
            if (!window.TradingView) {
                reject(new Error("Failed to inject TradingView into window"));
                return;
            }
            resolve(window.TradingView);
        };
        script.onerror = () => reject("Failed to inject Trading View script");
        if (!document.querySelector("script[src='https://s3.tradingview.com/tv.js']"))
            document.head.appendChild(script);
    });
};

const getId = () => {
    return "tradingview_" + (1048576 * (1 + Math.random()) | 0).toString(16).substring(1);
};

var ValuesTracking;
(function (ValuesTracking) {
    ValuesTracking["SCALE_LABELS"] = "0";
    ValuesTracking["FLOATING_TOOLTIP"] = "1";
    ValuesTracking["COLORED_TOOLTIP"] = "2";
    ValuesTracking["LEGEND"] = "3";
})(ValuesTracking || (ValuesTracking = {}));

function useIsMounted() {
    const isMounted = useRef(false);
    useEffect(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, []);
    return useCallback(() => isMounted.current, []);
}

const chartTypeDefaultValues = {
    bars: {
        upColor: "#22AB94",
        downColor: "#F7525F",
    },
    line: {
        lineWidth: 3,
    },
    area: {
        lineColor: "#2962FF",
        topColor: "rgba(41, 98, 255, 0.3)",
        bottomColor: "rgba(41, 98, 255, 0)",
        lineWidth: 3,
    },
    candlesticks: {
        upColor: "#22AB94",
        downColor: "#F7525F",
        borderUpColor: "#22AB94",
        borderDownColor: "#F7525F",
        wickUpColor: "#22AB94",
        wickDownColor: "#F7525F",
    }
};
const SymbolOverview = React.forwardRef(function SymbolOverviewRoot({ fallback, containerStyles, ...props }, ref) {
    const idRef = useRef(getId());
    const isMounted = useIsMounted();
    const [isError, setIsError] = useState(false);
    useEffect(() => {
        (async () => {
            try {
                const TradingView = await injectTradingView();
                new TradingView.MediumWidget({
                    chartOnly: false,
                    locale: "en",
                    colorTheme: "dark",
                    autosize: false,
                    showVolume: false,
                    hideDateRanges: false,
                    scalePosition: "right",
                    scaleMode: "Normal",
                    fontFamily: "-apple-system, BlinkMacSystemFont, Trebuchet MS, Roboto, Ubuntu, sans-serif",
                    fontSize: "10",
                    noTimeScale: false,
                    valuesTracking: ValuesTracking.FLOATING_TOOLTIP,
                    chartType: "line",
                    whitelabel: !!props.hideLogo,
                    ...props,
                    width: props.autosize ? "100%" : (props.width || 1000),
                    height: props.autosize ? "100%" : (props.height || 500),
                    ...chartTypeDefaultValues[props.chartType || "line"],
                    container_id: idRef.current,
                });
                const node = document.querySelector("iframe[id^=\"tradingview_\"]");
                // enables iframe transparency
                if (node && node instanceof HTMLElement)
                    node.style.colorScheme = "normal";
                if (isMounted())
                    setIsError(false);
            }
            catch (error) {
                if (isMounted())
                    setIsError(true);
            }
        })();
    }, [JSON.stringify(props)]);
    return (React.createElement("div", { style: containerStyles, ref: ref },
        React.createElement("div", { id: idRef.current }, isError && fallback ? fallback : null)));
});

var AdvancedChartBarStyle;
(function (AdvancedChartBarStyle) {
    AdvancedChartBarStyle["BARS"] = "0";
    AdvancedChartBarStyle["CANDLES"] = "1";
    AdvancedChartBarStyle["LINE"] = "2";
    AdvancedChartBarStyle["AREA"] = "3";
    AdvancedChartBarStyle["RENKO"] = "4";
    AdvancedChartBarStyle["KAGI"] = "5";
    AdvancedChartBarStyle["POINT_AND_FIGURE"] = "6";
    AdvancedChartBarStyle["LINE_BREAK"] = "7";
    AdvancedChartBarStyle["HEIKIN_ASHI"] = "8";
    AdvancedChartBarStyle["HOLLOW_CANDLES"] = "9";
})(AdvancedChartBarStyle || (AdvancedChartBarStyle = {}));

const AdvancedRealTimeChart = React.forwardRef(function AdvancedRealTimeChartRoot({ fallback, containerStyles, chartOnly, hideLogo, ...props }, ref) {
    const idRef = useRef(getId());
    const isMounted = useIsMounted();
    const [isError, setIsError] = useState(false);
    useEffect(() => {
        (async () => {
            try {
                const TradingView = await injectTradingView();
                new TradingView.widget({
                    autosize: false,
                    interval: "1",
                    timezone: "Etc/UTC",
                    theme: "dark",
                    style: AdvancedChartBarStyle.CANDLES,
                    locale: "en",
                    toolbar_bg: "#f1f3f6",
                    enable_publishing: false,
                    allow_symbol_change: true,
                    whitelabel: !!hideLogo,
                    width: props.autosize ? "100%" : (props.width || 1000),
                    height: props.autosize ? "100%" : (props.height || 500),
                    ...(chartOnly && {
                        hide_top_toolbar: true,
                        hide_side_toolbar: true,
                        hide_legend: true,
                    }),
                    ...props,
                    container_id: idRef.current,
                });
                const node = document.querySelector("iframe[id^=\"tradingview_\"]");
                // enables iframe transparency
                if (node && node instanceof HTMLElement)
                    node.style.colorScheme = "normal";
                if (isMounted())
                    setIsError(false);
            }
            catch (error) {
                if (isMounted())
                    setIsError(true);
            }
        })();
    }, [JSON.stringify(props)]);
    return (React.createElement("div", { style: containerStyles, ref: ref },
        React.createElement("div", { id: idRef.current }, isError && fallback ? fallback : null)));
});

const MiniChart = ({ containerStyles, lineColor, topGradientColor, bottomGradientColor, width, height, autosize, ...props }) => {
    const containerRef = useRef(null);
    useEffect(() => {
        if (!containerRef.current)
            return;
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "https://s3.tradingview.com/external-embedding/embed-widget-mini-symbol-overview.js";
        script.async = true;
        script.onload = async () => {
            const iframe = containerRef.current?.querySelector("iframe");
            if (iframe && iframe instanceof Element)
                iframe.style.colorScheme = "normal";
        };
        const config = JSON.stringify({
            width: autosize ? "100%" : (width || 350),
            height: autosize ? "100%" : (height || 220),
            dateRange: "1D",
            colorTheme: "dark",
            trendLineColor: lineColor || "rgba(41, 98, 255, 1)",
            underLineColor: topGradientColor || "rgba(41, 98, 255, 0.3)",
            underLineBottomColor: bottomGradientColor || "rgba(41, 98, 255, 0)",
            isTransparent: true,
            ...props,
        });
        script.innerHTML = config;
        containerRef.current.appendChild(script);
        return () => {
            while (containerRef.current?.firstChild) {
                containerRef.current.removeChild(containerRef.current.firstChild);
            }
        };
    }, [JSON.stringify(props)]);
    return (React.createElement("div", { style: containerStyles, className: "tradingview-widget-container", ref: containerRef }));
};

var MiniChartDateRanges;
(function (MiniChartDateRanges) {
    MiniChartDateRanges["ONE_DAY"] = "1D";
    MiniChartDateRanges["ONE_MONTH"] = "1M";
    MiniChartDateRanges["THREE_MONTHS"] = "3M";
    MiniChartDateRanges["ONE_YEAR"] = "12M";
    MiniChartDateRanges["FIVE_YEARS"] = "60M";
    MiniChartDateRanges["ALL"] = "ALL";
})(MiniChartDateRanges || (MiniChartDateRanges = {}));

export { AdvancedChartBarStyle, AdvancedRealTimeChart, MiniChart, MiniChartDateRanges, SymbolOverview, ValuesTracking };
